---
title: "index"
subtitle: "ESS 330-Lab 3-COVID-19"
author: 
  - name: "Cameron MCLaughlin"
format: html
output-dir: "C:/Users/laxca/Softwares/Git/ESS330_Lab3/docs"
---

# Lab 03 Covid

```{r}
#load packages
library(tidyverse)
library(flextable)
library(zoo)
library(readr)
library(lubridate)
library(dplyr)
```

## Question 1

```{r}
#Question1- Read csv from webpage
covid_raw <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")

```

## Question 2

```{r}
#Question 2-my date object
txt <- "2022-02-01"
class(txt)
date_example <- as.Date(txt)
class(date_example)

my.date <- as.Date("2022-02-01")
my.state <- "Colorado"
class(my.date)
```

```{r}
#-leave raw data, start cleaning
library(dplyr)
covid_data_CO <- covid_raw %>%
  filter(state == "Colorado") %>%
  group_by(county) %>%
  arrange(date) %>%
  mutate(new_cases = cases - lag(cases),
         new_deaths = deaths - lag(deaths)) %>% ungroup()
```

## Question 3

```{r}
#Question 3: Normalizing Data
pop_data <- read_csv('https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv') %>%
  mutate(
    STATE = sprintf("%02d", as.numeric(STATE)),
    COUNTY = sprintf("%03d", as.numeric(COUNTY)),
    fips = paste0(STATE, COUNTY)
  ) %>%
  select(fips, contains("NAME"), contains("2021")) %>%
  filter(str_sub(fips, 3, 5) != "000")


names(pop_data)
dim(pop_data)
glimpse(pop_data)

colorado_pop2021 <- pop_data %>%
  filter(STNAME == "Colorado") %>%
  select(STNAME, POPESTIMATE2021, fips)

range(colorado_pop2021$POPESTIMATE2021)

combined_data <- covid_data_CO %>%
  inner_join(colorado_pop2021, by = "fips") %>%
  mutate(
    per_capita_cumulative_cases = cases / POPESTIMATE2021,
    per_capita_new_cases = new_cases / POPESTIMATE2021,
    per_capita_new_deaths = new_deaths / POPESTIMATE2021)

#top 5 counties with the most cumulative cases
combined_data %>% 
  filter(date == my.date)  %>%
  slice_max(per_capita_cumulative_cases, n = 5) %>%
  select(Date = date, County = county, `Per Capita Cumulative Cases` = per_capita_cumulative_cases) %>%
  flextable()  %>%
  set_caption("Top Counties by Per Capita Cumulative Cases on 2021-02-01")

#top 5 counties with most new cases per cap
combined_data %>% 
  filter(date == my.date)  %>%
  slice_max(per_capita_new_cases, n = 5) %>%
  select(Date = date, County = county, `Per Capita New Cases` = per_capita_new_cases) %>%
  flextable()  %>%
  set_caption("Top Counties by Per Capita New Cases on 2021-02-01")
```

The range for CO counties populations in 2021 was 741 to 737,287.

## Question 4

```{r}
#Question 4: Rolling Thresholds
#step 1-Filter data to last 14 days
max_date <- max(combined_data$date, na.rm = TRUE)
covid_last14 <- combined_data %>%
  filter(date >= (max_date - 13) & date <= max_date)

#Calc total new cases/100,000 people over last 14
last14_casesummary <- covid_last14 %>%
  group_by(fips, county, POPESTIMATE2021) %>%
  summarize(
    total_new_cases = sum(new_cases, na.rm = TRUE), .groups = "drop") %>% 
  mutate(new_cases_per_100k = (total_new_cases / POPESTIMATE2021) * 100000)

#make table
top5_counties <- last14_casesummary %>%
  slice_max(new_cases_per_100k, n = 5) %>%
  select(County = county,
         `Total New Cases` = total_new_cases,
         `New Cases per 100k` = new_cases_per_100k)

top5_counties %>%
  flextable() %>%
  set_caption("Top 5 Colorado Counties by New Cases per 100,000 in the Last 14 Days")

#count exceptions
watchlist_count <- last14_casesummary %>%
  filter(new_cases_per_100k > 100) %>%
  nrow()

print(watchlist_count)

```

There were 53 counties that exceeded this watchlist parameter: “More than 100 new cases per 100,000 residents over the past 14 days”.

## Question 5

```{r}
#Question 5: Death Toll

tmp.date = as.Date("2022-02-01")
lubridate::year(tmp.date)
lubridate::month(tmp.date)
lubridate::yday(tmp.date)

covid_deaths_2021 <- combined_data %>%
  filter(date >= as.Date("2021-01-01") & date <= as.Date("2021-12-31")) %>% group_by(fips, county) %>%
  summarize(total_covid_deaths_2021 = sum(deaths, na.rm = TRUE), .groups = "drop")

deaths_ratio <- covid_deaths_2021 %>%
  inner_join(pop_data %>% select(fips, DEATHS2021), by = "fips") %>%
  mutate(covid_death_ratio = (total_covid_deaths_2021 / DEATHS2021) * 100)
         
high_ratio_counties <- deaths_ratio %>%
  filter(covid_death_ratio >= 20)

ggplot(high_ratio_counties, aes(x = reorder(county, covid_death_ratio), y = covid_death_ratio)) +
  geom_col(fill = "tomato") +
  coord_flip() +
  labs(
    title = "Colorado Counties with ≥ 20% COVID-19 Deaths in 2021",
    x = "County",
    y = "COVID Deaths (% of Total 2021 Deaths)"
  ) +
  theme_minimal()

```

## Question 6

```{r}
#Question 6- Multi state

#prep states
states_daily_cases <- covid_raw %>%
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) %>%
  group_by(state, date) %>%
  mutate(
    new_cases = cases - lag(cases),
    new_deaths = deaths - lag(deaths)
  ) %>%
  summarize(daily_cases = sum(new_cases, na.rm = TRUE), .groups = "drop")

#prep census (01 is AL, 08 is CO, 36 is NY, 39 is OH)
states_popdata <-read_csv('https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv') %>%
  mutate(
    STATE = sprintf("%02d", as.numeric(STATE)),
    COUNTY = sprintf("%03d", as.numeric(COUNTY)),
    fips = paste0(STATE, COUNTY)) %>%
  select(fips, STATE, COUNTY, contains("NAME"), POPESTIMATE2021) %>%
  filter(STATE %in% c("01", "08", "36", "39"), str_sub(fips, 3, 5) != "000")

#pop to state level
states_pop <- states_popdata %>%
  group_by(STNAME) %>%
  summarize(pop_2021 = sum(POPESTIMATE2021), .groups = "drop")

#join the two
state_cases_with_pop <- states_daily_cases %>%
  full_join(states_pop, by = c("state" = "STNAME"))

#Compute the rolling 7day mean
state_cases_with_pop <- state_cases_with_pop %>%
  group_by(state) %>%
  mutate(
    rolling_mean_7day = rollmean(daily_cases, k = 7, fill = NA, align = "center"),
    cases_per_100k = (daily_cases / pop_2021) * 100000,
    rolling_mean_7day_per_100k = rollmean(cases_per_100k, k = 7, fill = NA, align = "center")) %>% ungroup()

#plot 1- new cases with rolling mean
ggplot(state_cases_with_pop, aes(x = date)) +
  geom_col(aes(y = daily_cases), fill = "blue", alpha = 0.4) +
  geom_line(aes(y = rolling_mean_7day), color = "red", linewidth = 1.3, na.rm = TRUE) +
  facet_wrap(~ state, scales = "free_y") +
  labs(
    title = "New Daily COVID Cases and 7-Day Rolling Mean",
    x = "Date",
    y = "Daily New Cases"
  ) +
  theme_minimal()

#plot 2
ggplot(state_cases_with_pop, aes(x = date, y = rolling_mean_7day_per_100k, color = state)) +
  geom_line() +
  labs(
    title = "7 Day Rolling Avg of COVID Cases per 100k Citizens",
    x = "Date",
    y = "Cases per 100k",
    color = "State") +
  theme_minimal()
```

Analysis:

Scaling by population results in a better comparison. Without this element, we are comparing small states to big states without regard to their size, which strongly impacts the number of cases they have. In this way, scaling by population keeps us from comparing "apples to oranges".

In this way, scaling by population makes New York look better than Alabama because now the cases look smaller (due to scaling by pop.) versus a smaller state like Alabama where scaling by population makes the cases look worse.

## Question 7

```{r}
#7-Space/Time
statecoords <- read_csv("data/county-centroids.csv")

Covidspatial <- covid_raw %>% 
  full_join(statecoords, by = c("fips" = "fips"))

#compute wmc
wmc_df <- Covidspatial %>% group_by(date) %>% 
 summarize(
    total_cases = sum(cases, na.rm = TRUE),
    WMC_LONG = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
    WMC_LAT = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
    month = format(date, "%m"), .groups = "drop")

wmc_cases_df <- wmc_df %>%
  mutate(month = as.factor(month))


ggplot() +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(data = wmc_cases_df, aes(x = WMC_LONG, y = WMC_LAT, colour = month, size = total_cases), alpha = 0.5) +
  scale_size_continuous(range = c(2, 10)) +
  labs(title = "Weighted Mean Center (WMC) of Covid Cases in US",
       x = "Longitude",
       y = "Latitude",
       color = "Month",
       size = "Total Cases") + 
  theme_minimal()

```

Based on this map., the COVID weighted center mean looks like it started around 35\~40 Lat, -90 Long. According to the first confirmed COVID case being reported from Illinois, and there being the large population center of Chicago there, this map suggests there as the weighted center then a strong movement trend towards the southward/southeastward. Based on state by state lock downs and reopenings, I can certainly understand this map suggesting that the mean weighted center moved towards the south, where the lock downs were maybe less stringent and prevention measures were possibly enforced less strong.

Additionally, the trend Westward into Colorado can be understood as surges in California as a population center for the disease certainly drew the weighted center towards the West during peak periods between Jan and April.

## Question 8

```{r, fig.width=12, fig.height=6, out.width="100%"}
#Question 8
#compute WMC Deaths
#compute wmc
wmc_deaths_df <- Covidspatial %>% group_by(date) %>% 
 summarize(
    total_deaths = sum(deaths, na.rm = TRUE),
    WMC_LONG = sum(LON * deaths, na.rm = TRUE) / sum(deaths, na.rm = TRUE),
    WMC_LAT = sum(LAT * deaths, na.rm = TRUE) / sum(deaths, na.rm = TRUE),
    month = format(date, "%m"), .groups = "drop")

#Cases Plot-red
P_cases <- ggplot() +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(data = wmc_cases_df, aes(x = WMC_LONG, y = WMC_LAT, colour = month, size = total_cases), alpha = 0.5) +
  scale_size_continuous(range = c(2,10)) +
  labs(title = "WMC of Covid Cases", x = "Longitude", y = "Latitude", color = "Month", size = "Total Cases") + theme_minimal() + theme(plot.title = element_text(color = "red", size = 10, face = "bold"))

#Deaths Plot-navy
P_deaths <- ggplot() +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(data = wmc_deaths_df, aes(x = WMC_LONG, y = WMC_LAT, colour = month, size = total_deaths), alpha =0.5) +
  scale_size_continuous(range = c(2,10)) +
  labs(title = "WMC of Covid Deaths", x = "Longitude", y = "Latitude", color = "Month", size = "Total Deaths") + theme_minimal() + theme(plot.title = element_text(color = "navy", size = 10, face = "bold"))

#patchwork
library(patchwork)
P_cases / P_deaths
```
